<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="AxisControl" Id="{0762ff6d-63f2-4251-b923-cf396e8d588b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK AxisControl
VAR
	
	// Axis Reference
	_Axis					: ARRAY [1.._NumberOfAxes] OF AXIS_REF;		
	
	// Internal Variables
	_i						: UINT := 0;
	_InputToggle			: BOOL := FALSE;
	_LocalState				: UINT := 0;
	_InternalCounter		: UDINT := 0;
	_InternalCounterMax		: UDINT := 1000;
	_ErrorIDPrevious		: ARRAY [1.._NumberOfAxes] OF UDINT;
	_ErrorCount				: ARRAY [1.._NumberOfAxes] OF UINT;
	_BusyMoving				: ARRAY [1.._NumberOfAxes] OF BOOL;
	_BusyStopping			: ARRAY [1.._NumberOfAxes] OF BOOL;
	_CommandDone			: BOOL := FALSE;
	_CurrentPosition		: ARRAY [1.._NumberOfAxes] OF LREAL;
	_CurrentPositionModulo	: ARRAY [1.._NumberOfAxes] OF LREAL;
	
	// Internal Functions
	_ErrorCountTrigger		: R_TRIG;
	_DelayTimer				: TON;	
	
	// Axis States (STRUCTURE Declaration)
	_Status					: ARRAY [1.._NumberOfAxes] OF AxisStatus;
	
	// Motion Functions Blocks
	_Enable					: ARRAY [1.._NumberOfAxes] OF MC_Power;
	_Reset					: ARRAY [1.._NumberOfAxes] OF MC_Reset;
	_ReadStatus				: ARRAY [1.._NumberOfAxes] OF MC_ReadStatus;
	_WriteParameter			: MC_WriteParameter;	
	_MoveAbs1				: MC_MoveAbsolute;
	_MoveAbs2				: MC_MoveAbsolute;
	_MoveRel1				: MC_MoveRelative;
	_MoveRel2				: MC_MoveRelative;
	_MoveVel1				: MC_MoveVelocity;
	_MoveVel2				: MC_MoveVelocity;
	_StopWeak				: MC_Halt;
	_StopStrong				: MC_Stop;
		
END_VAR
VAR CONSTANT
	
	_NumberOfAxes			: UINT := 3;

END_VAR]]></Declaration>
    <Implementation>
      <NWL>
        <XmlArchive>
          <Data>
            <o xml:space="preserve" t="NWLImplementationObject">
              <v n="NetworkListComment">""</v>
              <v n="DefaultViewMode">"Fbd"</v>
              <l2 n="NetworkList" />
              <v n="BranchCounter">0</v>
              <v n="ValidIds">true</v>
            </o>
          </Data>
          <TypeList>
            <Type n="Boolean">System.Boolean</Type>
            <Type n="Int32">System.Int32</Type>
            <Type n="NWLImplementationObject">{25e509de-33d4-4447-93f8-c9e4ea381c8b}</Type>
            <Type n="String">System.String</Type>
          </TypeList>
        </XmlArchive>
      </NWL>
    </Implementation>
    <Folder Name="Methods" Id="{84cb375e-4310-4c8e-b285-59f1b782ddd6}">
      <Folder Name="All Axes" Id="{e7566577-33ba-4fd4-a911-8164896a8c57}">
        <Folder Name="Power and Monitoring" Id="{72185a63-bd61-464d-9ba5-7925e55fb430}" />
      </Folder>
      <Folder Name="Single Axis" Id="{6793107f-f025-4746-9720-75111f89ad08}">
        <Folder Name="Movements" Id="{6fc24c7c-89c4-4f59-a059-62fbfee907d6}">
          <Folder Name="Brake" Id="{531eff0b-604f-4c37-ace9-2958971ea826}" />
          <Folder Name="Position" Id="{8d7c9616-e265-4389-960e-a02f0ff11726}" />
          <Folder Name="Velocity" Id="{bd356ce1-0682-451a-8f8f-f2d75631abf0}" />
        </Folder>
        <Folder Name="Power and Monitoring" Id="{dada0367-7150-48df-9b09-3250334c5191}" />
      </Folder>
    </Folder>
    <Folder Name="Properties" Id="{391590a4-d10f-4e23-95ce-50d1b79d7756}" />
    <Method Name="AutoErrorCheckAndReset" Id="{c4558794-dce0-4723-8ae5-ffe53ab7450c}" FolderPath="Methods\Single Axis\Power and Monitoring\">
      <Declaration><![CDATA[METHOD AutoErrorCheckAndReset : BOOL
VAR_INPUT
	AxisID			: UINT;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Automatically check for errors on the NC axis, then reset them
// Use with caution, this could cause damage to a physical system if implemented without care

_ReadStatus[AxisID](Axis := _Axis[AxisID]);
_Reset[AxisID](Axis := _Axis[AxisID]);
_ErrorCountTrigger(CLK := _Status[AxisID]._Error);

IF _ErrorCountTrigger.Q THEN
	_ErrorCount[AxisID] := _ErrorCount[AxisID] + 1;
END_IF

IF _Status[AxisID]._Error THEN
	_LocalState := 0;
	_Reset[AxisID].Execute := TRUE;
	IF _Reset[AxisID].Done THEN
		_Reset[AxisID].Execute := FALSE;
		AutoErrorCheckAndReset := TRUE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="AxisStatus" Id="{743488a2-70c8-43fc-bb97-edf6af21b812}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY AxisStatus : ARRAY [1.._NumberOfAxes] OF AxisStatus ]]></Declaration>
      <Get Name="Get" Id="{c75450e0-e73c-4f6d-987f-cb307a38ed66}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisStatus := _Status;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{10fca8b1-77ef-4bc2-af4d-2836594ff324}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="CheckForErrors" Id="{1156e6bc-6693-4a8a-8e9b-2040f7a304f7}" FolderPath="Methods\Single Axis\Power and Monitoring\">
      <Declaration><![CDATA[METHOD CheckForErrors : BOOL
VAR_INPUT	
	AxisID			: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Check for errors on the NC axis

_ReadStatus[AxisID](Axis := _Axis[AxisID]);
_ErrorCountTrigger(CLK := _Status[AxisID]._Error);

IF _ErrorCountTrigger.Q THEN
	_ErrorCount[AxisID] := _ErrorCount[AxisID] + 1;
END_IF

IF _Status[AxisID]._Error THEN
	_LocalState := 0;
	CheckForErrors := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentPosition" Id="{0d1e2e23-bb07-4506-9aeb-9d8a3f1ee275}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentPosition : ARRAY [1.._NumberOfAxes] OF LREAL]]></Declaration>
      <Get Name="Get" Id="{da39f4b5-331e-4c86-bc7c-08dd1f53b62a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentPosition := _CurrentPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2634205a-da86-4017-b85e-f528dc45565c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="CurrentPositionModulo" Id="{e8141d9f-c0d1-4e38-8d71-2c39cd70b6d8}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY CurrentPositionModulo : ARRAY [1.._NumberOfAxes] OF LREAL]]></Declaration>
      <Get Name="Get" Id="{691176b4-512c-462b-aa59-d8430d3ceba7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentPositionModulo := _CurrentPositionModulo;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d888dd7e-e7e5-474c-9371-00d8cdc883c5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="CyclicUpdate" Id="{176bec90-816f-4a05-8962-1238a59c2f75}">
      <Declaration><![CDATA[METHOD CyclicUpdate : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Update method needs to be called cyclically

_InputToggle := NOT(_InputToggle);

FOR _i := 1 TO _NumberOfAxes DO
	
	_Enable[_i]		(Axis := _Axis[_i]);
	_Reset[_i]		(Axis := _Axis[_i]);
	
	_ReadStatus[_i]
	(
		Axis 					:= _Axis[_i],
		Enable 					:= TRUE,
		Error 					=> _Status[_i]._Error,
		ErrorID 				=> _Status[_i]._ErrorID,
		ErrorStop 				=> _Status[_i]._ErrorStop,
		Disabled 				=> _Status[_i]._Disabled,
		Stopping 				=> _Status[_i]._Stopping,
		StandStill 				=> _Status[_i]._StandStill,
		DiscreteMotion 			=> _Status[_i]._DiscreteMotion,
		ContinuousMotion 		=> _Status[_i]._ContinuousMotion,
		SynchronizedMotion	 	=> _Status[_i]._SynchronizedMotion,
		Homing 					=> _Status[_i]._Homing,
		ConstantVelocity		=> _Status[_i]._ConstantVelocity,
		Accelerating 			=> _Status[_i]._Accelerating,
		Decelerating 			=> _Status[_i]._Decelerating,
		Status 					=> _Status[_i]._Status
	);
	
	_BusyMoving[_i] :=
	(
		_ReadStatus[_i].DiscreteMotion OR
		_ReadStatus[_i].ConstantVelocity OR
		_ReadStatus[_i].SynchronizedMotion
	);
	
	_BusyStopping[_i] :=
	(
		_ReadStatus[_i].Stopping
	);
	
	IF _Status[_i]._ErrorID <> 0 THEN
		_ErrorIDPrevious[_i] := _Status[_i]._ErrorID;
	END_IF
			
	_CurrentPosition[_i] := _Axis[_i].NcToPlc.ActPos;
	_CurrentPositionModulo[_i] := _Axis[_i].NcToPlc.ModuloActPos;
	
END_FOR

CyclicUpdate := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ErrorCount" Id="{2a69a2b3-4084-45d9-8c58-9ec4131dbcea}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ErrorCount : ARRAY [1.._NumberOfAxes] OF UINT]]></Declaration>
      <Get Name="Get" Id="{df5fca3a-d559-4692-b26f-04bdffd38858}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorCount := _ErrorCount;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{74b040fc-cc77-439a-a040-356ee4860fad}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Halt" Id="{12ca4ce0-9928-46fe-8da6-258c70e9b8b4}" FolderPath="Methods\Single Axis\Movements\Brake\">
      <Declaration><![CDATA[METHOD Halt : BOOL
VAR_INPUT
	AxisID			: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Halts the axis, NOT locking the axis from further commands during its process

_StopWeak(Axis := _Axis[AxisID]);

_StopWeak.Execute			:= TRUE;

IF _StopWeak.Done THEN
	_StopWeak.Execute := FALSE;
	Halt := TRUE;
END_IF

IF _StopWeak.Error THEN
	_StopWeak.Execute := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveAtVelocity" Id="{031bd219-54b3-423c-a59d-8808208dd282}" FolderPath="Methods\Single Axis\Movements\Velocity\">
      <Declaration><![CDATA[METHOD MoveAtVelocity : BOOL
VAR_INPUT
	AxisID			: UINT;
	Velocity		: LREAL;
	Direction		: MC_Direction;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Move at a given speed in a defined direction until a stop command is activated

_MoveVel1(Axis := _Axis[AxisID]);

_MoveVel1.Velocity 			:= Velocity;
_MoveVel1.Direction			:= Direction;
_MoveVel1.Execute			:= TRUE;

IF _BusyMoving[AxisID] THEN
	_MoveVel1.Execute := FALSE;
	MoveAtVelocity := TRUE;
END_IF

IF _MoveVel1.Error THEN
	_MoveVel1.Execute := FALSE;
	MoveAtVelocity := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveToPosition" Id="{6f3dc5db-e33f-4ac2-89b3-444ea6b1636a}" FolderPath="Methods\Single Axis\Movements\Position\">
      <Declaration><![CDATA[METHOD MoveToPosition : BOOL
VAR_INPUT
	AxisID			: UINT;
	Position		: LREAL;
	Velocity		: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Move to a specific location at a given speed

_MoveAbs1(Axis := _Axis[AxisID]);

_MoveAbs1.Position			:= Position;
_MoveAbs1.Velocity 			:= Velocity;
_MoveAbs1.Execute			:= TRUE;

IF _MoveAbs1.Done THEN
	_MoveAbs1.Execute := FALSE;
	MoveToPosition := TRUE;
END_IF

IF _MoveAbs1.Error THEN
	_MoveAbs1.Execute := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOff" Id="{931cb592-80ae-4fd4-9bc7-23c7456ec9bf}" FolderPath="Methods\Single Axis\Power and Monitoring\">
      <Declaration><![CDATA[METHOD PowerOff : BOOL
VAR_INPUT
	Override	 	: LREAL;
	AxisID			: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Disable the axis

IF Override < 0 THEN
	Override := 0;
ELSIF Override > 100 THEN
	Override := 100;	
END_IF

IF AxisID < 1 THEN
	AxisID := 1;
ELSIF AxisID > _NumberOfAxes THEN
	AxisID := 1;	
END_IF

_Enable[AxisID](Axis := _Axis[AxisID]);

_Enable[AxisID].Enable 				:= FALSE;
_Enable[AxisID].Enable_Negative 	:= FALSE;
_Enable[AxisID].Enable_Positive 	:= FALSE;
_Enable[AxisID].Override 			:= 0;

IF NOT(_Enable[AxisID].Status) THEN
	PowerOff := TRUE;
ELSIF _Enable[AxisID].Error THEN
	PowerOff := FALSE;
	_Enable[AxisID].Enable := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOffAll" Id="{9b0e604b-5d41-49b9-90f5-0c685b4b557c}" FolderPath="Methods\All Axes\Power and Monitoring\">
      <Declaration><![CDATA[METHOD PowerOffAll : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Enable all axes

FOR _i := 1 TO _NumberOfAxes BY 1 DO
	_Enable[_i](Axis := _Axis[_i]);
END_FOR

CASE _LocalState OF 
	
	0:
		_LocalState := 1;
	
	1:
		FOR _i := 1 TO _NumberOfAxes BY 1 DO
			_Enable[_i](Axis := _Axis[_i]);
			_Enable[_i].Enable := FALSE;
			_Enable[_i].Enable_Negative := FALSE;
			_Enable[_i].Enable_Positive := FALSE;
			_Enable[_i].Override := 0;
		END_FOR
		_LocalState := 2;
		
	2:
		_CommandDone := TRUE;
		FOR _i := 1 TO _NumberOfAxes BY 1 DO
			IF _Enable[_i].Status THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= _InternalCounterMax THEN
			_InternalCounter := 0;
			_LocalState := 0;
			PowerOffAll := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_InternalCounter := 0;
			_LocalState := 3;
		END_IF
		
	3:
		_LocalState := 0;
		PowerOffAll := TRUE;

END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOn" Id="{055fc17f-11ee-4864-95b6-aec8c64cb3a6}" FolderPath="Methods\Single Axis\Power and Monitoring\">
      <Declaration><![CDATA[METHOD PowerOn : BOOL
VAR_INPUT
	Override	 	: LREAL;
	AxisID			: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Enable the axis

IF Override < 0 THEN
	Override := 0;
ELSIF Override > 100 THEN
	Override := 100;	
END_IF

IF AxisID < 1 THEN
	AxisID := 1;
ELSIF AxisID > _NumberOfAxes THEN
	AxisID := 1;	
END_IF

_Enable[AxisID](Axis := _Axis[AxisID]);

_Enable[AxisID].Enable 				:= TRUE;
_Enable[AxisID].Enable_Negative 	:= TRUE;
_Enable[AxisID].Enable_Positive 	:= TRUE;
_Enable[AxisID].Override 			:= 100;

IF _Enable[AxisID].Status THEN
	PowerOn := TRUE;
ELSIF _Enable[AxisID].Error THEN
	PowerOn := FALSE;
	_Enable[AxisID].Enable := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="PowerOnAll" Id="{093c7e56-b9c1-443e-a0d9-93c4a871420c}" FolderPath="Methods\All Axes\Power and Monitoring\">
      <Declaration><![CDATA[METHOD PowerOnAll : BOOL
VAR_INPUT
	Override		: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Enable all axes

IF Override < 0 THEN
	Override := 0;
ELSIF Override > 100 THEN
	Override := 100;	
END_IF

FOR _i := 1 TO _NumberOfAxes BY 1 DO
	_Enable[_i](Axis := _Axis[_i]);
END_FOR

CASE _LocalState OF 
	
	0:
		_LocalState := 1;
	
	1:
		FOR _i := 1 TO _NumberOfAxes BY 1 DO
			_Enable[_i](Axis := _Axis[_i]);
			_Enable[_i].Enable := TRUE;
			_Enable[_i].Enable_Negative := TRUE;
			_Enable[_i].Enable_Positive := TRUE;
			_Enable[_i].Override := Override;
		END_FOR
		_LocalState := 2;
		
	2:
		_CommandDone := TRUE;
		FOR _i := 1 TO _NumberOfAxes BY 1 DO
			IF NOT(_Enable[_i].Status) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= _InternalCounterMax THEN
			_InternalCounter := 0;
			_LocalState := 0;
			PowerOnAll := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_InternalCounter := 0;
			_LocalState := 3;
		END_IF
		
	3:
		_LocalState := 0;
		PowerOnAll := TRUE;

END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{42cec210-5b3f-4f2e-9099-2c39c8e00b0b}" FolderPath="Methods\Single Axis\Power and Monitoring\">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
	AxisID			: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Reset errors on the NC axis

IF AxisID < 1 THEN
	AxisID := 1;
ELSIF AxisID > _NumberOfAxes THEN
	AxisID := 1;	
END_IF

_Reset[AxisID](Axis := _Axis[AxisID]);

_Reset[AxisID].Execute 			:= TRUE;

IF _Reset[AxisID].Done THEN
	_Reset[AxisID].Execute := FALSE;
	Reset := TRUE;
END_IF
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReversingSequence" Id="{cfe6002d-006b-4fb1-82ee-b56b6ae14ab9}" FolderPath="Methods\Single Axis\Movements\Position\">
      <Declaration><![CDATA[METHOD ReversingSequence : BOOL
VAR_INPUT
	AxisID			: UINT;
	Position1				: LREAL;
	Position2				: LREAL;
	Velocity				: LREAL;
	DelayBetweenMoves		: TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Move to Position1, then to Position2, at a set speed with a delay between the movements

_MoveAbs1(Axis := _Axis[AxisID]);
_MoveAbs2(Axis := _Axis[AxisID]);
_DelayTimer(PT := DelayBetweenMoves);

_MoveAbs1.Position			:= Position1;
_MoveAbs1.Velocity 			:= Velocity;

_MoveAbs2.Position			:= Position2;
_MoveAbs2.Velocity 			:= Velocity;

CASE _LocalState OF
	
	0:
		_MoveAbs1.Execute := TRUE;
		IF _MoveAbs1.Done THEN
			_MoveAbs1.Execute := FALSE;
			_LocalState := 1;			
		END_IF
		
	1:
		_DelayTimer.IN := TRUE;
		IF _DelayTimer.Q THEN
			_DelayTimer.IN := FALSE;
			_LocalState := 2;
		END_IF
		
	2:
		_MoveAbs2.Execute := TRUE;
		IF _MoveAbs2.Done THEN
			_MoveAbs2.Execute := FALSE;
			_LocalState := 3;			
		END_IF
		
	3:
		_DelayTimer.IN := TRUE;
		IF _DelayTimer.Q THEN
			_DelayTimer.IN := FALSE;
			_LocalState := 4;
		END_IF
		
	4:
		_LocalState := 0;
		ReversingSequence := TRUE;

END_CASE

IF _MoveAbs1.Error OR _MoveAbs2.Error THEN
	_MoveAbs1.Execute := FALSE;
	_MoveAbs2.Execute := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{e8f89590-5010-45fb-a6e8-5b340988abbd}" FolderPath="Methods\Single Axis\Movements\Brake\">
      <Declaration><![CDATA[METHOD Stop : BOOL
VAR_INPUT
	AxisID			: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Halts the axis, locking the axis from further commands during its process

_StopStrong(Axis := _Axis[AxisID]);

_StopStrong.Execute			:= TRUE;

IF _StopStrong.Done THEN
	_StopStrong.Execute := FALSE;
	Stop := TRUE;
END_IF

IF _StopStrong.Error THEN
	_StopStrong.Execute := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteToParameter" Id="{9cfda403-6e05-479b-94e2-36ef4e728d76}" FolderPath="Methods\Single Axis\Power and Monitoring\">
      <Declaration><![CDATA[METHOD WriteToParameter : BOOL
VAR_INPUT
	AxisID			: UINT;	
	Parameter		: MC_AxisParameter;
	Value			: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF AxisID < 1 THEN
	AxisID := 1;
ELSIF AxisID > _NumberOfAxes THEN
	AxisID := 1;	
END_IF

_WriteParameter(Axis := _Axis[AxisID]);

_WriteParameter.ParameterNumber := Parameter;
_WriteParameter.Value := Value;
_WriteParameter.Execute := TRUE;


IF _WriteParameter.Done THEN
	WriteToParameter := TRUE;
	_WriteParameter.Execute := FALSE;
ELSIF _WriteParameter.Error THEN
	WriteToParameter := FALSE;
	_WriteParameter.Execute := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="AxisControl.AutoErrorCheckAndReset">
      <LineId Id="97" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="78" Count="3" />
      <LineId Id="76" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="89" Count="2" />
      <LineId Id="88" Count="0" />
      <LineId Id="87" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.AxisStatus.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.AxisStatus.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.CheckForErrors">
      <LineId Id="37" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="29" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.CurrentPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.CurrentPosition.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.CurrentPositionModulo.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.CurrentPositionModulo.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.CyclicUpdate">
      <LineId Id="7" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="60" Count="2" />
      <LineId Id="82" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="4" />
      <LineId Id="71" Count="5" />
      <LineId Id="78" Count="2" />
      <LineId Id="92" Count="1" />
      <LineId Id="97" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="105" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="107" Count="4" />
      <LineId Id="121" Count="0" />
      <LineId Id="123" Count="3" />
      <LineId Id="140" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="136" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.ErrorCount.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.ErrorCount.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.Halt">
      <LineId Id="21" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="1" />
    </LineIds>
    <LineIds Name="AxisControl.MoveAtVelocity">
      <LineId Id="70" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="49" Count="10" />
      <LineId Id="61" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="60" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.MoveToPosition">
      <LineId Id="87" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="59" Count="4" />
      <LineId Id="70" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="72" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.PowerOff">
      <LineId Id="33" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="42" Count="23" />
      <LineId Id="37" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.PowerOffAll">
      <LineId Id="28" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="3" />
      <LineId Id="75" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="79" Count="3" />
      <LineId Id="74" Count="0" />
      <LineId Id="90" Count="5" />
      <LineId Id="97" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="110" Count="2" />
      <LineId Id="114" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="101" Count="5" />
      <LineId Id="69" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.PowerOn">
      <LineId Id="28" Count="1" />
      <LineId Id="42" Count="4" />
      <LineId Id="41" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="23" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="34" Count="2" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.PowerOnAll">
      <LineId Id="28" Count="1" />
      <LineId Id="58" Count="2" />
      <LineId Id="63" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="3" />
      <LineId Id="75" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="79" Count="3" />
      <LineId Id="74" Count="0" />
      <LineId Id="90" Count="5" />
      <LineId Id="97" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="110" Count="2" />
      <LineId Id="114" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="101" Count="5" />
      <LineId Id="69" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.Reset">
      <LineId Id="20" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="26" Count="4" />
      <LineId Id="25" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.ReversingSequence">
      <LineId Id="117" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="43" Count="2" />
      <LineId Id="55" Count="0" />
      <LineId Id="60" Count="3" />
      <LineId Id="78" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="94" Count="4" />
      <LineId Id="100" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="85" Count="3" />
      <LineId Id="84" Count="0" />
      <LineId Id="101" Count="1" />
      <LineId Id="104" Count="3" />
      <LineId Id="103" Count="0" />
      <LineId Id="89" Count="3" />
      <LineId Id="64" Count="1" />
      <LineId Id="28" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="AxisControl.Stop">
      <LineId Id="23" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="1" />
    </LineIds>
    <LineIds Name="AxisControl.WriteToParameter">
      <LineId Id="28" Count="4" />
      <LineId Id="26" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>